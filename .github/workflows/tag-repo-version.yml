name: tag-repo-version

on:
  push:
    branches: [main]
    paths:
      - 'packages/repo-version/package.json'  # only run when repo version changes

permissions:
  contents: write  # must also be allowed in repo/org settings

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read repo version
        id: ver
        run: |
          FILE=packages/repo-version/package.json
          test -f "$FILE" || (echo "::error::$FILE not found" && exit 1)
          V=$(jq -r .version "$FILE")
          test -n "$V" -a "$V" != "null" || (echo "::error::version missing" && exit 1)
          echo "ver=$V" >> "$GITHUB_OUTPUT"
          echo "Resolved version: $V"

      # Create or update refs/tags/vX.Y.Z using the GitHub API
      - name: Create/update tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const tag   = `v${{ steps.ver.outputs.ver }}`;

            // HEAD commit of the workflow run (merge commit on main)
            const sha = context.sha;

            // Try to create the tag; if it exists, update it (force move)
            try {
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/tags/${tag}`,
                sha
              });
              core.info(`Created tag ${tag} -> ${sha}`);
            } catch (e) {
              if (e.status === 422) {
                core.info(`Tag ${tag} already exists; updating to ${sha}`);
                await github.rest.git.updateRef({
                  owner, repo,
                  ref: `tags/${tag}`,
                  sha,
                  force: true
                });
              } else {
                core.setFailed(`Failed to create/update tag: ${e.message}`);
              }
            }

      # Optional: show tags for debugging
      - name: Show tags (debug)
        run: |
          git fetch --tags --force
          echo "Local tags:" && git tag --list 'v*' --sort=-creatordate | head -n 20
          echo "Remote tags:" && git ls-remote --tags origin | tail -n 10
