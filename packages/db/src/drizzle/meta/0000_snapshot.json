{
  "id": "ad53d308-5d5b-494e-b821-8df09e0a2aaf",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.identities": {
      "name": "identities",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "kind": {
          "name": "kind",
          "type": "identity_kind",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "public_id": {
          "name": "public_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "value": {
          "name": "value",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "incoming_domain": {
          "name": "incoming_domain",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "domain_identity_id": {
          "name": "domain_identity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": null
        },
        "dns_records": {
          "name": "dns_records",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "meta": {
          "name": "meta",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "provider_id": {
          "name": "provider_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "smtp_account_id": {
          "name": "smtp_account_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "identity_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'unverified'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "uniq_identity_per_user": {
          "name": "uniq_identity_per_user",
          "columns": [
            {
              "expression": "owner_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "kind",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "value",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "uniq_identity_public_id": {
          "name": "uniq_identity_public_id",
          "columns": [
            {
              "expression": "public_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "identities_owner_id_users_id_fk": {
          "name": "identities_owner_id_users_id_fk",
          "tableFrom": "identities",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "identities_domain_identity_id_identities_id_fk": {
          "name": "identities_domain_identity_id_identities_id_fk",
          "tableFrom": "identities",
          "tableTo": "identities",
          "columnsFrom": [
            "domain_identity_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        },
        "identities_provider_id_providers_id_fk": {
          "name": "identities_provider_id_providers_id_fk",
          "tableFrom": "identities",
          "tableTo": "providers",
          "columnsFrom": [
            "provider_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "identities_smtp_account_id_smtp_accounts_id_fk": {
          "name": "identities_smtp_account_id_smtp_accounts_id_fk",
          "tableFrom": "identities",
          "tableTo": "smtp_accounts",
          "columnsFrom": [
            "smtp_account_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "identities_select_own": {
          "name": "identities_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"identities\".\"owner_id\" = (select auth.uid())"
        },
        "identities_insert_own": {
          "name": "identities_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"identities\".\"owner_id\" = (select auth.uid())"
        },
        "identities_update_own": {
          "name": "identities_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"identities\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"identities\".\"owner_id\" = (select auth.uid())"
        },
        "identities_delete_own": {
          "name": "identities_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"identities\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.mailbox_sync": {
      "name": "mailbox_sync",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "identity_id": {
          "name": "identity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "mailbox_id": {
          "name": "mailbox_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "uid_validity": {
          "name": "uid_validity",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true
        },
        "last_seen_uid": {
          "name": "last_seen_uid",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "backfill_cursor_uid": {
          "name": "backfill_cursor_uid",
          "type": "bigint",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "highest_modseq": {
          "name": "highest_modseq",
          "type": "numeric(20, 0)",
          "primaryKey": false,
          "notNull": false
        },
        "phase": {
          "name": "phase",
          "type": "mailbox_sync_phase",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'BOOTSTRAP'"
        },
        "synced_at": {
          "name": "synced_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "error": {
          "name": "error",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "now()"
        }
      },
      "indexes": {
        "ux_mailbox_sync_mailbox": {
          "name": "ux_mailbox_sync_mailbox",
          "columns": [
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ix_mailbox_sync_identity": {
          "name": "ix_mailbox_sync_identity",
          "columns": [
            {
              "expression": "identity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ix_mailbox_sync_phase": {
          "name": "ix_mailbox_sync_phase",
          "columns": [
            {
              "expression": "phase",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "mailbox_sync_identity_id_identities_id_fk": {
          "name": "mailbox_sync_identity_id_identities_id_fk",
          "tableFrom": "mailbox_sync",
          "tableTo": "identities",
          "columnsFrom": [
            "identity_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "mailbox_sync_mailbox_id_mailboxes_id_fk": {
          "name": "mailbox_sync_mailbox_id_mailboxes_id_fk",
          "tableFrom": "mailbox_sync",
          "tableTo": "mailboxes",
          "columnsFrom": [
            "mailbox_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.mailbox_threads": {
      "name": "mailbox_threads",
      "schema": "",
      "columns": {
        "thread_id": {
          "name": "thread_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "mailbox_id": {
          "name": "mailbox_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "identity_id": {
          "name": "identity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "identity_public_id": {
          "name": "identity_public_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "mailbox_slug": {
          "name": "mailbox_slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "subject": {
          "name": "subject",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "preview_text": {
          "name": "preview_text",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "last_activity_at": {
          "name": "last_activity_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "first_message_at": {
          "name": "first_message_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "message_count": {
          "name": "message_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "unread_count": {
          "name": "unread_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "has_attachments": {
          "name": "has_attachments",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "starred": {
          "name": "starred",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "participants": {
          "name": "participants",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "ix_mbth_mailbox_activity": {
          "name": "ix_mbth_mailbox_activity",
          "columns": [
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "last_activity_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "thread_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ix_mbth_identity_slug": {
          "name": "ix_mbth_identity_slug",
          "columns": [
            {
              "expression": "identity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "mailbox_slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ix_mbth_identity_public_id": {
          "name": "ix_mbth_identity_public_id",
          "columns": [
            {
              "expression": "identity_public_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ix_mbth_mailbox_unread": {
          "name": "ix_mbth_mailbox_unread",
          "columns": [
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "unread_count",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ix_mbth_mailbox_starred": {
          "name": "ix_mbth_mailbox_starred",
          "columns": [
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "starred",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ux_mbth_thread_mailbox": {
          "name": "ux_mbth_thread_mailbox",
          "columns": [
            {
              "expression": "thread_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "mailbox_threads_thread_id_threads_id_fk": {
          "name": "mailbox_threads_thread_id_threads_id_fk",
          "tableFrom": "mailbox_threads",
          "tableTo": "threads",
          "columnsFrom": [
            "thread_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "mailbox_threads_mailbox_id_mailboxes_id_fk": {
          "name": "mailbox_threads_mailbox_id_mailboxes_id_fk",
          "tableFrom": "mailbox_threads",
          "tableTo": "mailboxes",
          "columnsFrom": [
            "mailbox_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "mailbox_threads_owner_id_users_id_fk": {
          "name": "mailbox_threads_owner_id_users_id_fk",
          "tableFrom": "mailbox_threads",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "mailbox_threads_identity_id_identities_id_fk": {
          "name": "mailbox_threads_identity_id_identities_id_fk",
          "tableFrom": "mailbox_threads",
          "tableTo": "identities",
          "columnsFrom": [
            "identity_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {
        "pk_mailbox_threads": {
          "name": "pk_mailbox_threads",
          "columns": [
            "thread_id",
            "mailbox_id"
          ]
        }
      },
      "uniqueConstraints": {},
      "policies": {
        "mbth_select_own": {
          "name": "mbth_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"mailbox_threads\".\"owner_id\" = (select auth.uid())"
        },
        "mbth_insert_own": {
          "name": "mbth_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"mailbox_threads\".\"owner_id\" = (select auth.uid())"
        },
        "mbth_update_own": {
          "name": "mbth_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"mailbox_threads\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"mailbox_threads\".\"owner_id\" = (select auth.uid())"
        },
        "mbth_delete_own": {
          "name": "mbth_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"mailbox_threads\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.mailboxes": {
      "name": "mailboxes",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "identity_id": {
          "name": "identity_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "public_id": {
          "name": "public_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "kind": {
          "name": "kind",
          "type": "mailbox_kind",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'inbox'"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "slug": {
          "name": "slug",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_default": {
          "name": "is_default",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "meta": {
          "name": "meta",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "uniq_mailbox_public_id": {
          "name": "uniq_mailbox_public_id",
          "columns": [
            {
              "expression": "public_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "uniq_default_mailbox_per_kind": {
          "name": "uniq_default_mailbox_per_kind",
          "columns": [
            {
              "expression": "identity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "kind",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "where": "\"mailboxes\".\"is_default\" IS TRUE",
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "uniq_mailbox_slug_per_identity": {
          "name": "uniq_mailbox_slug_per_identity",
          "columns": [
            {
              "expression": "identity_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "slug",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "where": "\"mailboxes\".\"slug\" IS NOT NULL",
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "mailboxes_owner_id_users_id_fk": {
          "name": "mailboxes_owner_id_users_id_fk",
          "tableFrom": "mailboxes",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "mailboxes_identity_id_identities_id_fk": {
          "name": "mailboxes_identity_id_identities_id_fk",
          "tableFrom": "mailboxes",
          "tableTo": "identities",
          "columnsFrom": [
            "identity_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "mailboxes_select_own": {
          "name": "mailboxes_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"mailboxes\".\"owner_id\" = (select auth.uid())"
        },
        "mailboxes_insert_own": {
          "name": "mailboxes_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"mailboxes\".\"owner_id\" = (select auth.uid())"
        },
        "mailboxes_update_own": {
          "name": "mailboxes_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"mailboxes\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"mailboxes\".\"owner_id\" = (select auth.uid())"
        },
        "mailboxes_delete_own": {
          "name": "mailboxes_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"mailboxes\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.message_attachments": {
      "name": "message_attachments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "message_id": {
          "name": "message_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "bucket_id": {
          "name": "bucket_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "default": "'attachments'"
        },
        "path": {
          "name": "path",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "filename_original": {
          "name": "filename_original",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "content_type": {
          "name": "content_type",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "size_bytes": {
          "name": "size_bytes",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "cid": {
          "name": "cid",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_inline": {
          "name": "is_inline",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "checksum": {
          "name": "checksum",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_msg_attachments_message": {
          "name": "idx_msg_attachments_message",
          "columns": [
            {
              "expression": "message_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "uniq_bucket_path": {
          "name": "uniq_bucket_path",
          "columns": [
            {
              "expression": "bucket_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "path",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_msg_attachments_cid": {
          "name": "idx_msg_attachments_cid",
          "columns": [
            {
              "expression": "cid",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "message_attachments_owner_id_users_id_fk": {
          "name": "message_attachments_owner_id_users_id_fk",
          "tableFrom": "message_attachments",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "message_attachments_message_id_messages_id_fk": {
          "name": "message_attachments_message_id_messages_id_fk",
          "tableFrom": "message_attachments",
          "tableTo": "messages",
          "columnsFrom": [
            "message_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "message_attachments_select_own": {
          "name": "message_attachments_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"message_attachments\".\"owner_id\" = (select auth.uid())"
        },
        "message_attachments_insert_own": {
          "name": "message_attachments_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"message_attachments\".\"owner_id\" = (select auth.uid())"
        },
        "message_attachments_update_own": {
          "name": "message_attachments_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"message_attachments\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"message_attachments\".\"owner_id\" = (select auth.uid())"
        },
        "message_attachments_delete_own": {
          "name": "message_attachments_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"message_attachments\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.messages": {
      "name": "messages",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "mailbox_id": {
          "name": "mailbox_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "public_id": {
          "name": "public_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "message_id": {
          "name": "message_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "in_reply_to": {
          "name": "in_reply_to",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "references": {
          "name": "references",
          "type": "text[]",
          "primaryKey": false,
          "notNull": false
        },
        "thread_id": {
          "name": "thread_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "reply_to": {
          "name": "reply_to",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'[]'::jsonb"
        },
        "delivered_to": {
          "name": "delivered_to",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "priority": {
          "name": "priority",
          "type": "message_priority",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": false,
          "default": "null"
        },
        "html": {
          "name": "html",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "subject": {
          "name": "subject",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "snippet": {
          "name": "snippet",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "text_as_html": {
          "name": "text_as_html",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "from": {
          "name": "from",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "null"
        },
        "to": {
          "name": "to",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "null"
        },
        "cc": {
          "name": "cc",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "null"
        },
        "bcc": {
          "name": "bcc",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "null"
        },
        "date": {
          "name": "date",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "size_bytes": {
          "name": "size_bytes",
          "type": "integer",
          "primaryKey": false,
          "notNull": false
        },
        "seen": {
          "name": "seen",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "answered": {
          "name": "answered",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "flagged": {
          "name": "flagged",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "draft": {
          "name": "draft",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "has_attachments": {
          "name": "has_attachments",
          "type": "boolean",
          "primaryKey": false,
          "notNull": true,
          "default": false
        },
        "state": {
          "name": "state",
          "type": "message_state",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'normal'"
        },
        "headers_json": {
          "name": "headers_json",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "raw_storage_key": {
          "name": "raw_storage_key",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "meta": {
          "name": "meta",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "uniq_message_public_id": {
          "name": "uniq_message_public_id",
          "columns": [
            {
              "expression": "public_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_messages_priority": {
          "name": "idx_messages_priority",
          "columns": [
            {
              "expression": "priority",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "uniq_mailbox_message_id": {
          "name": "uniq_mailbox_message_id",
          "columns": [
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "message_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_messages_in_reply_to": {
          "name": "idx_messages_in_reply_to",
          "columns": [
            {
              "expression": "in_reply_to",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "ix_messages_thread_flagged": {
          "name": "ix_messages_thread_flagged",
          "columns": [
            {
              "expression": "thread_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "flagged",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_messages_mailbox_date": {
          "name": "idx_messages_mailbox_date",
          "columns": [
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "date",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_messages_mailbox_seen_date": {
          "name": "idx_messages_mailbox_seen_date",
          "columns": [
            {
              "expression": "mailbox_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "seen",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "date",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "messages_owner_id_users_id_fk": {
          "name": "messages_owner_id_users_id_fk",
          "tableFrom": "messages",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "messages_mailbox_id_mailboxes_id_fk": {
          "name": "messages_mailbox_id_mailboxes_id_fk",
          "tableFrom": "messages",
          "tableTo": "mailboxes",
          "columnsFrom": [
            "mailbox_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "messages_thread_id_threads_id_fk": {
          "name": "messages_thread_id_threads_id_fk",
          "tableFrom": "messages",
          "tableTo": "threads",
          "columnsFrom": [
            "thread_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "messages_select_own": {
          "name": "messages_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"messages\".\"owner_id\" = (select auth.uid())"
        },
        "messages_insert_own": {
          "name": "messages_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"messages\".\"owner_id\" = (select auth.uid())"
        },
        "messages_update_own": {
          "name": "messages_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"messages\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"messages\".\"owner_id\" = (select auth.uid())"
        },
        "messages_delete_own": {
          "name": "messages_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"messages\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.provider_secrets": {
      "name": "provider_secrets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "provider_id": {
          "name": "provider_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "secret_id": {
          "name": "secret_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "provider_secrets_provider_id_providers_id_fk": {
          "name": "provider_secrets_provider_id_providers_id_fk",
          "tableFrom": "provider_secrets",
          "tableTo": "providers",
          "columnsFrom": [
            "provider_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "provider_secrets_secret_id_secrets_meta_id_fk": {
          "name": "provider_secrets_secret_id_secrets_meta_id_fk",
          "tableFrom": "provider_secrets",
          "tableTo": "secrets_meta",
          "columnsFrom": [
            "secret_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "provsec_select_own": {
          "name": "provsec_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n      "
        },
        "provsec_insert_own": {
          "name": "provsec_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n        and exists (\n          select 1 from \"secrets_meta\" s\n          where s.id = \"provider_secrets\".\"secret_id\"\n            and s.owner_id = (select auth.uid())\n        )\n      "
        },
        "provsec_update_own": {
          "name": "provsec_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n      ",
          "withCheck": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n        and exists (\n          select 1 from \"secrets_meta\" s\n          where s.id = \"provider_secrets\".\"secret_id\"\n            and s.owner_id = (select auth.uid())\n        )\n      "
        },
        "provsec_delete_own": {
          "name": "provsec_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n      "
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.providers": {
      "name": "providers",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "type": {
          "name": "type",
          "type": "provider_kind",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "meta": {
          "name": "meta",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "uniq_provider_per_user": {
          "name": "uniq_provider_per_user",
          "columns": [
            {
              "expression": "owner_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "providers_owner_id_users_id_fk": {
          "name": "providers_owner_id_users_id_fk",
          "tableFrom": "providers",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "providers_select_own": {
          "name": "providers_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"providers\".\"owner_id\" = (select auth.uid())"
        },
        "providers_insert_own": {
          "name": "providers_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"providers\".\"owner_id\" = (select auth.uid())"
        },
        "providers_update_own": {
          "name": "providers_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"providers\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"providers\".\"owner_id\" = (select auth.uid())"
        },
        "providers_delete_own": {
          "name": "providers_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"providers\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.secrets_meta": {
      "name": "secrets_meta",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "vault_secret": {
          "name": "vault_secret",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "secrets_meta_owner_id_users_id_fk": {
          "name": "secrets_meta_owner_id_users_id_fk",
          "tableFrom": "secrets_meta",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select_own": {
          "name": "select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        },
        "insert_own": {
          "name": "insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        },
        "update_own": {
          "name": "update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"secrets_meta\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        },
        "delete_own": {
          "name": "delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.smtp_account_secrets": {
      "name": "smtp_account_secrets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "account_id": {
          "name": "account_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "secret_id": {
          "name": "secret_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "smtp_account_secrets_account_id_smtp_accounts_id_fk": {
          "name": "smtp_account_secrets_account_id_smtp_accounts_id_fk",
          "tableFrom": "smtp_account_secrets",
          "tableTo": "smtp_accounts",
          "columnsFrom": [
            "account_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "smtp_account_secrets_secret_id_secrets_meta_id_fk": {
          "name": "smtp_account_secrets_secret_id_secrets_meta_id_fk",
          "tableFrom": "smtp_account_secrets",
          "tableTo": "secrets_meta",
          "columnsFrom": [
            "secret_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "smtpsec_select_own": {
          "name": "smtpsec_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n      "
        },
        "smtpsec_insert_own": {
          "name": "smtpsec_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n        and exists (select 1 from \"secrets_meta\" s\n                    where s.id = \"smtp_account_secrets\".\"secret_id\"\n                      and s.owner_id = (select auth.uid()))\n      "
        },
        "smtpsec_update_own": {
          "name": "smtpsec_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n      ",
          "withCheck": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n        and exists (select 1 from \"secrets_meta\" s\n                    where s.id = \"smtp_account_secrets\".\"secret_id\"\n                      and s.owner_id = (select auth.uid()))\n      "
        },
        "smtpsec_delete_own": {
          "name": "smtpsec_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n      "
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.smtp_accounts": {
      "name": "smtp_accounts",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "smtp_accounts_owner_id_users_id_fk": {
          "name": "smtp_accounts_owner_id_users_id_fk",
          "tableFrom": "smtp_accounts",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "smtp_select_own": {
          "name": "smtp_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        },
        "smtp_insert_own": {
          "name": "smtp_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        },
        "smtp_update_own": {
          "name": "smtp_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        },
        "smtp_delete_own": {
          "name": "smtp_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.threads": {
      "name": "threads",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "last_message_date": {
          "name": "last_message_date",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "last_message_id": {
          "name": "last_message_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": null
        },
        "message_count": {
          "name": "message_count",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "idx_threads_owner_lastdate": {
          "name": "idx_threads_owner_lastdate",
          "columns": [
            {
              "expression": "owner_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "last_message_date",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        },
        "idx_threads_owner_id": {
          "name": "idx_threads_owner_id",
          "columns": [
            {
              "expression": "owner_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": false,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "threads_owner_id_users_id_fk": {
          "name": "threads_owner_id_users_id_fk",
          "tableFrom": "threads",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "threads_last_message_id_messages_id_fk": {
          "name": "threads_last_message_id_messages_id_fk",
          "tableFrom": "threads",
          "tableTo": "messages",
          "columnsFrom": [
            "last_message_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "set null",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "threads_select_own": {
          "name": "threads_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"threads\".\"owner_id\" = (select auth.uid())"
        },
        "threads_insert_own": {
          "name": "threads_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"threads\".\"owner_id\" = (select auth.uid())"
        },
        "threads_update_own": {
          "name": "threads_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"threads\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"threads\".\"owner_id\" = (select auth.uid())"
        },
        "threads_delete_own": {
          "name": "threads_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"threads\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    }
  },
  "enums": {
    "public.identity_kind": {
      "name": "identity_kind",
      "schema": "public",
      "values": [
        "domain",
        "email"
      ]
    },
    "public.identity_status": {
      "name": "identity_status",
      "schema": "public",
      "values": [
        "unverified",
        "pending",
        "verified",
        "failed"
      ]
    },
    "public.mailbox_kind": {
      "name": "mailbox_kind",
      "schema": "public",
      "values": [
        "inbox",
        "sent",
        "drafts",
        "archive",
        "spam",
        "trash",
        "outbox",
        "custom"
      ]
    },
    "public.message_priority": {
      "name": "message_priority",
      "schema": "public",
      "values": [
        "low",
        "medium",
        "high"
      ]
    },
    "public.message_state": {
      "name": "message_state",
      "schema": "public",
      "values": [
        "normal",
        "bounced",
        "queued",
        "failed"
      ]
    },
    "public.provider_kind": {
      "name": "provider_kind",
      "schema": "public",
      "values": [
        "smtp",
        "ses",
        "mailgun",
        "postmark",
        "sendgrid"
      ]
    },
    "public.mailbox_sync_phase": {
      "name": "mailbox_sync_phase",
      "schema": "public",
      "values": [
        "BOOTSTRAP",
        "BACKFILL",
        "IDLE"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}