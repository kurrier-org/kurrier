{
  "id": "db9337c3-7119-4e3f-a2d8-15aa7fd504c8",
  "prevId": "c7829842-80b8-4222-b0a9-9163f9cc3496",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.identities": {
      "name": "identities",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "kind": {
          "name": "kind",
          "type": "identity_kind",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "value": {
          "name": "value",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "dns_records": {
          "name": "dns_records",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "meta": {
          "name": "meta",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'null'::jsonb"
        },
        "provider_id": {
          "name": "provider_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "smtp_account_id": {
          "name": "smtp_account_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "status": {
          "name": "status",
          "type": "identity_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true,
          "default": "'unverified'"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "uniq_identity_per_user": {
          "name": "uniq_identity_per_user",
          "columns": [
            {
              "expression": "owner_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "kind",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "value",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "identities_owner_id_users_id_fk": {
          "name": "identities_owner_id_users_id_fk",
          "tableFrom": "identities",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "identities_provider_id_providers_id_fk": {
          "name": "identities_provider_id_providers_id_fk",
          "tableFrom": "identities",
          "tableTo": "providers",
          "columnsFrom": [
            "provider_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        },
        "identities_smtp_account_id_smtp_accounts_id_fk": {
          "name": "identities_smtp_account_id_smtp_accounts_id_fk",
          "tableFrom": "identities",
          "tableTo": "smtp_accounts",
          "columnsFrom": [
            "smtp_account_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "identities_select_own": {
          "name": "identities_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"identities\".\"owner_id\" = (select auth.uid())"
        },
        "identities_insert_own": {
          "name": "identities_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"identities\".\"owner_id\" = (select auth.uid())"
        },
        "identities_update_own": {
          "name": "identities_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"identities\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"identities\".\"owner_id\" = (select auth.uid())"
        },
        "identities_delete_own": {
          "name": "identities_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"identities\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.provider_secrets": {
      "name": "provider_secrets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "provider_id": {
          "name": "provider_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "secret_id": {
          "name": "secret_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "provider_secrets_provider_id_providers_id_fk": {
          "name": "provider_secrets_provider_id_providers_id_fk",
          "tableFrom": "provider_secrets",
          "tableTo": "providers",
          "columnsFrom": [
            "provider_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "provider_secrets_secret_id_secrets_meta_id_fk": {
          "name": "provider_secrets_secret_id_secrets_meta_id_fk",
          "tableFrom": "provider_secrets",
          "tableTo": "secrets_meta",
          "columnsFrom": [
            "secret_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "provsec_select_own": {
          "name": "provsec_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n      "
        },
        "provsec_insert_own": {
          "name": "provsec_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n        and exists (\n          select 1 from \"secrets_meta\" s\n          where s.id = \"provider_secrets\".\"secret_id\"\n            and s.owner_id = (select auth.uid())\n        )\n      "
        },
        "provsec_update_own": {
          "name": "provsec_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n      ",
          "withCheck": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n        and exists (\n          select 1 from \"secrets_meta\" s\n          where s.id = \"provider_secrets\".\"secret_id\"\n            and s.owner_id = (select auth.uid())\n        )\n      "
        },
        "provsec_delete_own": {
          "name": "provsec_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (\n          select 1 from \"providers\" p\n          where p.id = \"provider_secrets\".\"provider_id\"\n            and p.owner_id = (select auth.uid())\n        )\n      "
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.providers": {
      "name": "providers",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "type": {
          "name": "type",
          "type": "provider_kind",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "uniq_provider_per_user": {
          "name": "uniq_provider_per_user",
          "columns": [
            {
              "expression": "owner_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            },
            {
              "expression": "type",
              "isExpression": false,
              "asc": true,
              "nulls": "last"
            }
          ],
          "isUnique": true,
          "concurrently": false,
          "method": "btree",
          "with": {}
        }
      },
      "foreignKeys": {
        "providers_owner_id_users_id_fk": {
          "name": "providers_owner_id_users_id_fk",
          "tableFrom": "providers",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "providers_select_own": {
          "name": "providers_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"providers\".\"owner_id\" = (select auth.uid())"
        },
        "providers_insert_own": {
          "name": "providers_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"providers\".\"owner_id\" = (select auth.uid())"
        },
        "providers_update_own": {
          "name": "providers_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"providers\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"providers\".\"owner_id\" = (select auth.uid())"
        },
        "providers_delete_own": {
          "name": "providers_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"providers\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.secrets_meta": {
      "name": "secrets_meta",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "vault_secret": {
          "name": "vault_secret",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "secrets_meta_owner_id_users_id_fk": {
          "name": "secrets_meta_owner_id_users_id_fk",
          "tableFrom": "secrets_meta",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "select_own": {
          "name": "select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        },
        "insert_own": {
          "name": "insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        },
        "update_own": {
          "name": "update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"secrets_meta\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        },
        "delete_own": {
          "name": "delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"secrets_meta\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.smtp_account_secrets": {
      "name": "smtp_account_secrets",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "account_id": {
          "name": "account_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "secret_id": {
          "name": "secret_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "smtp_account_secrets_account_id_smtp_accounts_id_fk": {
          "name": "smtp_account_secrets_account_id_smtp_accounts_id_fk",
          "tableFrom": "smtp_account_secrets",
          "tableTo": "smtp_accounts",
          "columnsFrom": [
            "account_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "smtp_account_secrets_secret_id_secrets_meta_id_fk": {
          "name": "smtp_account_secrets_secret_id_secrets_meta_id_fk",
          "tableFrom": "smtp_account_secrets",
          "tableTo": "secrets_meta",
          "columnsFrom": [
            "secret_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "smtpsec_select_own": {
          "name": "smtpsec_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n      "
        },
        "smtpsec_insert_own": {
          "name": "smtpsec_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n        and exists (select 1 from \"secrets_meta\" s\n                    where s.id = \"smtp_account_secrets\".\"secret_id\"\n                      and s.owner_id = (select auth.uid()))\n      "
        },
        "smtpsec_update_own": {
          "name": "smtpsec_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n      ",
          "withCheck": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n        and exists (select 1 from \"secrets_meta\" s\n                    where s.id = \"smtp_account_secrets\".\"secret_id\"\n                      and s.owner_id = (select auth.uid()))\n      "
        },
        "smtpsec_delete_own": {
          "name": "smtpsec_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\n        exists (select 1 from \"smtp_accounts\" a\n                where a.id = \"smtp_account_secrets\".\"account_id\"\n                  and a.owner_id = (select auth.uid()))\n      "
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    },
    "public.smtp_accounts": {
      "name": "smtp_accounts",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "owner_id": {
          "name": "owner_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "smtp_accounts_owner_id_users_id_fk": {
          "name": "smtp_accounts_owner_id_users_id_fk",
          "tableFrom": "smtp_accounts",
          "tableTo": "users",
          "schemaTo": "auth",
          "columnsFrom": [
            "owner_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "smtp_select_own": {
          "name": "smtp_select_own",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "authenticated"
          ],
          "using": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        },
        "smtp_insert_own": {
          "name": "smtp_insert_own",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        },
        "smtp_update_own": {
          "name": "smtp_update_own",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "authenticated"
          ],
          "using": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())",
          "withCheck": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        },
        "smtp_delete_own": {
          "name": "smtp_delete_own",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "authenticated"
          ],
          "using": "\"smtp_accounts\".\"owner_id\" = (select auth.uid())"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": true
    }
  },
  "enums": {
    "public.identity_kind": {
      "name": "identity_kind",
      "schema": "public",
      "values": [
        "domain",
        "email"
      ]
    },
    "public.identity_status": {
      "name": "identity_status",
      "schema": "public",
      "values": [
        "unverified",
        "pending",
        "verified",
        "failed"
      ]
    },
    "public.provider_kind": {
      "name": "provider_kind",
      "schema": "public",
      "values": [
        "smtp",
        "ses",
        "mailgun",
        "postmark",
        "sendgrid"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}